version: "3"

services:
  message:
    image: heidiks/rabbitmq-delayed-message-exchange:latest
    restart: unless-stopped
    networks:
      - pat
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - message_data:/var/lib/rabbitmq/
      - message_log:/var/log/rabbitmq/
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 10s
      retries: 5
  mongodb:
    image: mongo:latest
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - pat
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
  payment:
    build:
      context: ./payment
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "8080:8080"
    env_file:
      - .env
    networks:
      - pat
    environment:
      - MONGODB_URI=mongodb://${MONGO_USERNAME}:${MONGO_PASSWORD}@mongodb:27017/payment?ssl=false&authSource=admin
      - RABBITMQ_URI=amqp://guest:guest@message:5672
      - TICKET_WEBHOOK_URL=http://host.docker.internal:8000/bookings/webhook
    depends_on:
      mongodb:
        condition: service_started
      message:
        condition: service_healthy
  postgresql:
    build:
      dockerfile: ./postgres.Dockerfile
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pgpassword}
      POSTGRES_MULTIPLE_DATABASES: client,ticketing
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    networks:
      - pat
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
  ticketing:
    build:
      context: ./ticketing
      dockerfile: ./Dockerfile
    ports:
      - "8000:8000"
    networks:
      - pat
    depends_on:
      postgresql:
        condition: service_healthy
      message:
        condition: service_healthy
    environment:
      JDBC_URL: jdbc:postgresql://host.docker.internal:5433/ticketing
      JDBC_USERNAME: postgres
      JDBC_PASSWORD: pgpassword
      RMQ_HOST: host.docker.internal
      PAYMENT_SERVICE_ENDPOINT: http://host.docker.internal:8080
  client:
    build:
      context: ./client
      dockerfile: ./Dockerfile
    ports:
      - "3000:3000"
    networks:
      - pat
    depends_on:
      postgresql:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-pgpassword}@postgresql:5432/client
      - BASE_TICKET_SERVICE_URL=http://host.docker.internal:8000
networks:
  pat:
volumes:
  message_data:
  message_log:
  mongodb_data:
  postgres:
